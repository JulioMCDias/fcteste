/* Generated By:JavaCC: Do not edit this line. CodeAnalyzer.java */
package com.fcteste.model;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.AssignExpr;
import com.github.javaparser.ast.expr.BinaryExpr;
import com.github.javaparser.ast.expr.MethodCallExpr;
import com.github.javaparser.ast.expr.UnaryExpr;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;

public class CodeAnalyzer implements Serializable{
    private static final long serialVersionUID = 1L;
    
    
    public static class Count implements Serializable {
        private static final long serialVersionUID = 1L;
        private int operator = 0;
        private int operatorOnly = 0;
        private int operating = 0;

        private int lineNumber = 0;
        private int methodCall = 0;

        private int method = 0;

        ArrayList<String> l = new ArrayList<>();

        private void operatorOnlyAdd(String op) {
            if (!l.contains(op)) {
                l.add(op);
                operatorOnly++;
            }
        }

        public int getOperator() {
            return operator;
        }

        public int getOperatorOnly() {
            return operatorOnly;
        }

        public int getOperating() {
            return operating;
        }

        public int getLineNumber() {
            return lineNumber;
        }

        public int getMethodCall() {
            return methodCall;
        }

        public int getMethod() {
            return method;
        }

    };

    public final Count count;

    public CodeAnalyzer(InputStream in) {
         count = new Count();
        CompilationUnit cu = JavaParser.parse(in);
        cu.accept(new MethodVisitor(), null);
    }

    private class MethodVisitor extends VoidVisitorAdapter<Void> {

        @Override
        public void visit(MethodDeclaration n, Void arg) {
            count.method++;
            super.visit(n, arg);
        }

        @Override
        public void visit(CompilationUnit n, Void arg) {
            count.lineNumber = n.getEnd().get().line;
            super.visit(n, arg);
        }

        @Override
        public void visit(BinaryExpr n, Void arg) {
            count.operator++;
            count.operating += 2;
            count.operatorOnlyAdd(n.getOperator().asString());
            super.visit(n, arg);
        }

        @Override
        public void visit(AssignExpr n, Void arg) {
            count.operator++;
            count.operating += 2;
            count.operatorOnlyAdd(n.getOperator().asString());
            super.visit(n, arg);

        }

        @Override
        public void visit(UnaryExpr n, Void arg) {
            count.operator++;
            count.operating++;
            count.operatorOnlyAdd(n.getOperator().asString());
            super.visit(n, arg);
        }

        @Override
        public void visit(MethodCallExpr n, Void arg) {
            count.methodCall++;
        }

    }
}
