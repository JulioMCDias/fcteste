/* Generated By:JavaCC: Do not edit this line. CodeAnalyzer.java */
package com.fcteste.core;

public class CodeAnalyzer implements CodeAnalyzerConstants {

    public class Count{
        protected int opSum = 0;
        protected int opSubtrac = 0;
        protected int opMultiplication = 0;
        protected int opDivision = 0;
        protected int opModule = 0;
        protected int opXor = 0;
        protected int opAnd = 0;
        protected int opOr = 0;
        protected int opNot = 0;

        protected int operator = 0;
        protected int operatorOnly = 0;
        protected int operating = 0;

        protected int lineAll = 0;
        protected int lineBlank = 0;
        protected int command = 0;


        public int getOpSum() {
            return opSum;
        }

        public int getOpSubtrac() {
            return opSubtrac;
        }

        public int getOpMultiplication() {
            return opMultiplication;
        }

        public int getOpDivision() {
            return opDivision;
        }

        public int getOpModule() {
            return opModule;
        }

        public int getOpXor() {
            return opXor;
        }

        public int getOpAnd() {
            return opAnd;
        }

        public int getOpOr() {
            return opOr;
        }

        public int getOpNot() {
            return opNot;
        }

        public int getOperator() {
            return operator;
        }

        public int getOperatorOnly() {
            return operatorOnly;
        }

        public int getOperating() {
            return operating;
        }

        public int getLineAll() {
            return lineAll;
        }

        public int getLineBlank() {
            return lineBlank;
        }

        public int getCommand() {
            return command;
        }



    };

    public Count count = new Count();


    /** Main to debug. */
    public static void main(String args[]) throws ParseException {
        CodeAnalyzer parser = new CodeAnalyzer(System.in);
        parser.run();
    }

  final public void run() throws ParseException {
        //while(true){
            analyzer();

            //only debug
            System.out.println(
                "LineAll: " + count.lineAll +
                "lineBlank: " + count.lineBlank
            );
        //}

  }

  final private void analyzer() throws ParseException {
    label_1:
    while (true) {
      checkExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
      case SUBTRAC:
      case DIVISION:
      case MULTIPLICATION:
      case MODULE:
      case XOR:
      case AND:
      case OR:
      case NOT:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(PCOMMA);
  }

  final private void checkExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      operating();
      operator();
      operating();
      break;
    case SUM:
    case SUBTRAC:
    case DIVISION:
    case MULTIPLICATION:
    case MODULE:
    case XOR:
    case AND:
    case OR:
    case NOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUM:
      case SUBTRAC:
      case DIVISION:
      case MULTIPLICATION:
      case MODULE:
      case XOR:
      case AND:
      case OR:
        operator();
        break;
      case NOT:
        operatorSimple();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      operating();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUM:
      jj_consume_token(SUM);
           count.opSum++;
      break;
    case SUBTRAC:
      jj_consume_token(SUBTRAC);
                count.opSubtrac++;
      break;
    case MULTIPLICATION:
      jj_consume_token(MULTIPLICATION);
                       count.opMultiplication++;
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
                 count.opDivision++;
      break;
    case MODULE:
      jj_consume_token(MODULE);
               count.opModule++;
      break;
    case AND:
      jj_consume_token(AND);
           count.opAnd++;
      break;
    case OR:
      jj_consume_token(OR);
          count.opOr++;
      break;
    case XOR:
      jj_consume_token(XOR);
           count.opXor++;
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final private void operatorSimple() throws ParseException {
    jj_consume_token(NOT);
           count.opNot++;
  }

  final private void operating() throws ParseException {
    jj_consume_token(NUMBER);
  }

  /** Generated Token Manager. */
  public CodeAnalyzerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4001ff00,0x1ff00,0x4001ff00,0xff00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CodeAnalyzer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CodeAnalyzer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CodeAnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CodeAnalyzer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CodeAnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CodeAnalyzer(CodeAnalyzerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CodeAnalyzerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
