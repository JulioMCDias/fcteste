/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fcteste.view;

import com.fcteste.model.AnalyzerFiles;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;

/**
 *
 * @author Julio M. C. Dias
 */
public class ViewProgressBar extends javax.swing.JDialog 
        implements PropertyChangeListener {

    
    private Task task;
    int numberFiles;
    private AnalyzerFiles listCA;
    
    
    /**
     * Creates new form ViewProgressBa
     * @param parent
     * @param modal
     * @param numberFiles
     * @param listCA
     */
    public ViewProgressBar(java.awt.Frame parent, boolean modal ,int numberFiles, AnalyzerFiles listCA) {
        super(parent, modal);
        this.numberFiles = numberFiles;
        this.listCA = listCA;
        initComponents();
        
        jProgressBar.setIndeterminate(true);
        task = new Task();
        task.addPropertyChangeListener(this);
        task.execute();
    }
    
    


    /**
     * Invoked when task's progress property changes.
     * @param evt
     */
    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("progress".equals(evt.getPropertyName())) {
            int progress = (Integer) evt.getNewValue();
            jProgressBar.setIndeterminate(false);
            jProgressBar.setValue(progress);
            jLabel1.setText(String.format(
                        "Processando... %d de %d", progress, numberFiles));
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Processando... ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar;
    // End of variables declaration//GEN-END:variables


       private class Task extends SwingWorker<Void, Void> {

        /*
         * Main task. Executed in background thread.
         */
        @Override
        public Void doInBackground() {
            try {
                Thread.sleep(100);
            } catch (InterruptedException ex) { }
            while (listCA.getListCAnalyzer().size() < numberFiles) {
                //Sleep
                try {
                    Thread.sleep(100);
                } catch (InterruptedException ignore) { }
                setProgress((listCA.getListCAnalyzer().size()*100)/numberFiles);
            }
                setVisible(false);
            return null;
        }
 
        /*
         * Executed in event dispatch thread
         */
        @Override
        public void done() {
            Toolkit.getDefaultToolkit().beep();
            setVisible(false);
        }
    }
       
       
}
