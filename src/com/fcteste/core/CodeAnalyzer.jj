/*
* GNU General Public License v3.0
* Date: 13 January 2019
* Author: RDias
*/



options{
STATIC = false;
//DEBUG_LOOKAHEAD = true;
}

PARSER_BEGIN(CodeAnalyzer)

public class CodeAnalyzer {
    
    public class Count{
        protected int opSum = 0;
        protected int opSubtrac = 0;
        protected int opMultiplication = 0;
        protected int opDivision = 0;
        protected int opModule = 0;
        protected int opXor = 0;
        protected int opAnd = 0;
        protected int opOr = 0;
        protected int opNot = 0;
        
        protected int operator = 0;
        protected int operatorOnly = 0;
        protected int operating = 0;
        
        protected int lineAll = 0;
        protected int lineBlank = 0;
        protected int command = 0;
    };
    
    public Count count = new Count();
    
    
    /** Main to debug. */
    public static void main(String args[]) throws ParseException {
        CodeAnalyzer parser = new CodeAnalyzer(System.in);
        parser.run();
    }
}

PARSER_END(CodeAnalyzer)


SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  <END: "EOF">
  
| <NLINE: "\n">

| <PARENT_OPEN: "(">
| <PARENT_CLOSE: ")">
  
| <SUM: "+">
| <SUBTRAC: "-">
| <DIVISION: "/">
| <MULTIPLICATION: "*">
| <MODULE: "%">
| <XOR: "^">
| <AND: "&">
| <OR: "|">
| <NOT: "~">

| <ASSIGNMENT: "=">

| <EQUAL: "==">
| <DIFFERENT: "!=">
| <GREATER: ">">
| <LESS: "<">
| <GREQUAL: ">=">
| <LSEQUAL: "<=">
| <CAND: "&&">
| <COR: "||">
| <CXOR: "^^">
| <CNOT: "!">

| <POINT: ".">
| <PCOMMA: ";">

| <NUMBER: (["0"-"9"])+>
| <TXVALID: ((["a"-"z","A"-"Z"])+(["0"-"9"])*)>

| <OTHER: (["a" - "z"])+>
}





public void run() :
{}
{
    {
        while(true){
            analyzer();
            
            //only debug
            System.out.println(
                "LineAll: " + count.lineAll +
                "lineBlank: " + count.lineBlank
            );
        }
    }
    
}


private void analyzer():
{}
{
    checkNewLineBlank() | (checkExpression() checkNewLine())
}         
            


private void checkNewLine():
{}
{
    <NLINE> {count.lineAll++;}
}


private void checkNewLineBlank():
{}
{
    <NLINE> {count.lineBlank++; count.lineAll++;}
}



private void checkExpression():
{}
{
    <NUMBER> {System.out.println("n\n");}
}
