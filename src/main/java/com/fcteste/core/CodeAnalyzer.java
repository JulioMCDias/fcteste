/* Generated By:JavaCC: Do not edit this line. CodeAnalyzer.java */
package com.fcteste.core;

import com.github.javaparser.JavaParser;
import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.AssignExpr;
import com.github.javaparser.ast.expr.AssignExpr.Operator;
import com.github.javaparser.ast.expr.BinaryExpr;
import com.github.javaparser.ast.expr.UnaryExpr;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import java.io.InputStream;

public class CodeAnalyzer {

    public class Count {

        protected int operator = 0;
        protected int operatorOnly = 0;
        protected int operating = 0;

        protected int lineAll = 0;
        protected int lineBlank = 0;
        protected int command = 0;

        protected int method = 0;

        public int getOperator() {
            return operator;
        }

        public int getOperatorOnly() {
            return operatorOnly;
        }

        public int getOperating() {
            return operating;
        }

        public int getLineAll() {
            return lineAll;
        }

        public int getLineBlank() {
            return lineBlank;
        }

        public int getCommand() {
            return command;
        }

        public int getMethod() {
            return method;
        }

    };

    public Count count = new Count();

    public CodeAnalyzer(InputStream in) {
        CompilationUnit cu = JavaParser.parse(in);
        cu.accept(new MethodVisitor(), null);
    }

    public void run() {

    }

    private class MethodVisitor extends VoidVisitorAdapter<Void> {

        @Override
        public void visit(MethodDeclaration n, Void arg) {
            count.method++;
            super.visit(n, arg);
        }

        @Override
        public void visit(CompilationUnit n, Void arg) {
            count.lineAll = n.getEnd().get().line;
            super.visit(n, arg);
        }

        @Override
        public void visit(BinaryExpr n, Void arg) {
            count.operator++;
            count.operating += 2;
            super.visit(n, arg);
        }

        @Override
        public void visit(AssignExpr n, Void arg) {
            count.operator++;
            count.operating += 2;
            super.visit(n, arg);

        }

        @Override
        public void visit(UnaryExpr n, Void arg) {
            count.operator++;
            count.operating++;
            super.visit(n, arg);
        }

    }
}
